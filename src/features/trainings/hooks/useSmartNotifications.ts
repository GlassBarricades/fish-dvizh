import { useCallback, useEffect, useMemo, useRef } from 'react'
import { notifications } from '@mantine/notifications'
import { useTrainingContext } from '../context'

interface TrainingTip {
  type: 'bait' | 'timing' | 'technique' | 'weather' | 'general'
  message: string
  priority: 'low' | 'medium' | 'high'
  action?: () => void
}

export function useSmartNotifications() {
  const { state } = useTrainingContext()
  const { training, currentRig, catches, events, takenBaits } = state
  
  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —É–∂–µ –ø–æ–∫–∞–∑–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  const shownNotifications = useRef(new Set<string>())
  const componentMountTime = useRef(Date.now())

  // –ê–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø—Ä–∏–º–∞–Ω–æ–∫
  const baitEffectiveness = useMemo(() => {
    if (catches.length < 3) return null

    const baitStats = catches.reduce((acc, catch_) => {
      const baitKey = catch_.bait_id || catch_.bait_name || 'unknown'
      if (!acc[baitKey]) {
        acc[baitKey] = { count: 0, totalWeight: 0, baitName: catch_.bait_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø—Ä–∏–º–∞–Ω–∫–∞' }
      }
      acc[baitKey].count++
      if (catch_.weight_g) {
        acc[baitKey].totalWeight += catch_.weight_g
      }
      return acc
    }, {} as Record<string, { count: number; totalWeight: number; baitName: string }>)

    return Object.entries(baitStats)
      .map(([key, stats]) => ({
        baitId: key,
        baitName: stats.baitName,
        count: stats.count,
        avgWeight: stats.totalWeight / stats.count,
        effectiveness: stats.count * (stats.totalWeight / stats.count)
      }))
      .sort((a, b) => b.effectiveness - a.effectiveness)
  }, [catches])

  // –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–∏ –∫–ª—ë–≤–∞
  const timeEffectiveness = useMemo(() => {
    if (catches.length < 3) return null

    const hourlyStats = catches.reduce((acc, catch_) => {
      const hour = new Date(catch_.caught_at).getHours()
      if (!acc[hour]) acc[hour] = 0
      acc[hour]++
      return acc
    }, {} as Record<number, number>)

    const bestHour = Object.entries(hourlyStats)
      .sort(([, a], [, b]) => (b as number) - (a as number))[0]?.[0]

    return bestHour ? parseInt(bestHour) : null
  }, [catches])

  // –ê–Ω–∞–ª–∏–∑ —Ç–µ—Ö–Ω–∏–∫–∏ –ª–æ–≤–ª–∏
  const techniqueAnalysis = useMemo(() => {
    if (catches.length < 2) return null

    const releasedCount = catches.filter(c => c.released).length
    const totalCount = catches.length
    const releaseRate = releasedCount / totalCount

    return {
      releaseRate,
      shouldReleaseMore: releaseRate < 0.3,
      shouldReleaseLess: releaseRate > 0.8
    }
  }, [catches])

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫
  const tips = useMemo((): TrainingTip[] => {
    const tips: TrainingTip[] = []

    // –ü–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ –ø—Ä–∏–º–∞–Ω–∫–∞–º
    if (baitEffectiveness && currentRig?.bait) {
      const bestBait = baitEffectiveness[0]
      const currentBaitEffectiveness = baitEffectiveness.find(
        b => b.baitId === currentRig.bait?.dict_bait_id || b.baitName === currentRig.bait?.name
      )

      if (bestBait && currentBaitEffectiveness && 
          bestBait.effectiveness > currentBaitEffectiveness.effectiveness * 1.5) {
        tips.push({
          type: 'bait',
          message: `–ü–æ–ø—Ä–æ–±—É–π—Ç–µ ${bestBait.baitName} - –ª—É—á—à–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (${bestBait.count} –ø–æ–∏–º–æ–∫)`,
          priority: 'high'
        })
      }
    }

    // –ü–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    if (timeEffectiveness !== null) {
      const currentHour = new Date().getHours()
      if (Math.abs(currentHour - timeEffectiveness) > 2) {
        tips.push({
          type: 'timing',
          message: `–õ—É—á—à–∏–π –∫–ª—ë–≤ –Ω–∞–±–ª—é–¥–∞–ª—Å—è –≤ ${timeEffectiveness}:00. –°–µ–π—á–∞—Å ${currentHour}:00`,
          priority: 'medium'
        })
      }
    }

    // –ü–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ —Ç–µ—Ö–Ω–∏–∫–µ
    if (techniqueAnalysis) {
      if (techniqueAnalysis.shouldReleaseMore) {
        tips.push({
          type: 'technique',
          message: '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—É—Å–∫–∞—Ç—å –±–æ–ª—å—à–µ —Ä—ã–±—ã –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ø—É–ª—è—Ü–∏–∏',
          priority: 'medium'
        })
      } else if (techniqueAnalysis.shouldReleaseLess) {
        tips.push({
          type: 'technique',
          message: '–í–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–æ–∏—Ç –æ—Å—Ç–∞–≤–ª—è—Ç—å –±–æ–ª—å—à–µ —Ä—ã–±—ã –¥–ª—è –µ–¥—ã',
          priority: 'low'
        })
      }
    }

    // –û–±—â–∏–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏
    if (!currentRig?.bait && takenBaits.length > 0) {
      tips.push({
        type: 'bait',
        message: '–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–º–∞–Ω–∫—É –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏',
        priority: 'high',
        action: () => {
          // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–∏–º–∞–Ω–∫–∏
        }
      })
    }

    if (catches.length === 0 && events.length === 0) {
      tips.push({
        type: 'general',
        message: '–ù–∞—á–Ω–∏—Ç–µ —Å –ø–µ—Ä–≤–æ–π –ø–æ–∏–º–∫–∏ –∏–ª–∏ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏',
        priority: 'medium'
      })
    }

    if (catches.length > 10 && events.length === 0) {
      tips.push({
        type: 'technique',
        message: '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∫–ª—ë–≤–∫–∏ –∏ —Å—Ö–æ–¥—ã –¥–ª—è –ª—É—á—à–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞',
        priority: 'medium'
      })
    }

    return tips.sort((a, b) => {
      const priorityOrder = { high: 3, medium: 2, low: 1 }
      return priorityOrder[b.priority] - priorityOrder[a.priority]
    })
  }, [baitEffectiveness, timeEffectiveness, techniqueAnalysis, currentRig, takenBaits, catches, events])

  // –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  const showContextualNotification = useCallback(() => {
    if (!training) return

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –≤—ã—Å–æ–∫–æ–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    const highPriorityTips = tips.filter(tip => tip.priority === 'high')
    
    highPriorityTips.forEach(tip => {
      notifications.show({
        title: getTipTitle(tip.type),
        message: tip.message,
        color: getTipColor(tip.priority),
        autoClose: 8000,
        // action: tip.action ? {
        //   label: '–î–µ–π—Å—Ç–≤–∏–µ',
        //   onClick: tip.action
        // } : undefined
      })
    })
  }, [tips, training])

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö
  useEffect(() => {
    if (!training || catches.length === 0) return

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –ø–æ–∏–º–∫–∏ (—Å–æ–∑–¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞)
    const recentCatches = catches.filter(catch_ => {
      const catchTime = new Date(catch_.caught_at).getTime()
      return catchTime > componentMountTime.current
    })

    if (recentCatches.length === 0) return

    const latestCatch = recentCatches[0]
    const catchId = latestCatch.id

    // –ò–∑–±–µ–≥–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    if (shownNotifications.current.has(`catch-${catchId}`)) return

    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–µ—Ä–≤–æ–π –ø–æ–∏–º–∫–µ
    if (catches.length === 1) {
      notifications.show({
        title: 'üé£ –ü–µ—Ä–≤–∞—è –ø–æ–∏–º–∫–∞!',
        message: '–û—Ç–ª–∏—á–Ω–æ–µ –Ω–∞—á–∞–ª–æ! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ.',
        color: 'green',
        autoClose: 5000
      })
      shownNotifications.current.add(`catch-${catchId}`)
      return
    }

    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ 5 –ø–æ–∏–º–æ–∫
    if (catches.length === 5) {
      notifications.show({
        title: 'üèÜ 5 –ø–æ–∏–º–æ–∫!',
        message: '–í—ã –Ω–∞–±–∏—Ä–∞–µ—Ç–µ –æ–±–æ—Ä–æ—Ç—ã! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ä–∞–∑–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏.',
        color: 'blue',
        autoClose: 5000
      })
      shownNotifications.current.add(`milestone-5`)
      return
    }

    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ–∫–æ—Ä–¥–Ω–æ–π —Ä—ã–±–µ
    const maxWeight = Math.max(...catches.map(c => c.weight_g || 0))
    if (latestCatch.weight_g === maxWeight && maxWeight > 0) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–æ–≤—ã–π —Ä–µ–∫–æ—Ä–¥
      const previousMaxWeight = Math.max(...catches.filter(c => c.id !== catchId).map(c => c.weight_g || 0))
      if (maxWeight > previousMaxWeight) {
        notifications.show({
          title: 'üêü –ù–æ–≤—ã–π —Ä–µ–∫–æ—Ä–¥!',
          message: `–†—ã–±–∞ –≤–µ—Å–æ–º ${maxWeight}–≥ - —ç—Ç–æ –≤–∞—à–∞ —Å–∞–º–∞—è –∫—Ä—É–ø–Ω–∞—è –ø–æ–∏–º–∫–∞!`,
          color: 'yellow',
          autoClose: 6000
        })
        shownNotifications.current.add(`record-${catchId}`)
      }
    }
  }, [catches, training])

  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ–±—ã—Ç–∏—è—Ö
  useEffect(() => {
    if (!training || events.length === 0) return

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è (—Å–æ–∑–¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞)
    const recentEvents = events.filter(event => {
      const eventTime = new Date(event.at).getTime()
      return eventTime > componentMountTime.current
    })

    if (recentEvents.length === 0) return

    const latestEvent = recentEvents[0]
    const eventId = latestEvent.id
    const eventType = latestEvent.kind

    // –ò–∑–±–µ–≥–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    if (shownNotifications.current.has(`event-${eventId}`)) return

    const eventMessages = {
      strike: { title: '‚ö° –ü–æ–∫–ª—ë–≤–∫–∞!', message: '–†—ã–±–∞ –∫–ª—é–Ω—É–ª–∞! –ì–æ—Ç–æ–≤—å—Ç–µ—Å—å –∫ –ø–æ–¥—Å–µ—á–∫–µ.', color: 'blue' },
      lost: { title: 'üí® –°—Ö–æ–¥', message: '–†—ã–±–∞ —Å–æ—Ä–≤–∞–ª–∞—Å—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é —Ç–µ—Ö–Ω–∏–∫—É.', color: 'orange' },
      snag: { title: 'üåø –ó–∞—Ü–µ–ø', message: '–ó–∞—Ü–µ–ø–∏–ª–∏—Å—å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–Ω–∞—Å—Ç—å.', color: 'red' }
    }

    const eventInfo = eventMessages[eventType as keyof typeof eventMessages]
    if (eventInfo) {
      notifications.show({
        title: eventInfo.title,
        message: eventInfo.message,
        color: eventInfo.color,
        autoClose: 4000
      })
      shownNotifications.current.add(`event-${eventId}`)
    }
  }, [events, training])

  // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    return () => {
      shownNotifications.current.clear()
    }
  }, [])

  return {
    tips,
    showContextualNotification,
    baitEffectiveness,
    timeEffectiveness,
    techniqueAnalysis
  }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function getTipTitle(type: TrainingTip['type']): string {
  const titles = {
    bait: 'üé£ –ü—Ä–∏–º–∞–Ω–∫–∞',
    timing: '‚è∞ –í—Ä–µ–º—è',
    technique: 'üéØ –¢–µ—Ö–Ω–∏–∫–∞',
    weather: 'üå§Ô∏è –ü–æ–≥–æ–¥–∞',
    general: 'üí° –°–æ–≤–µ—Ç'
  }
  return titles[type]
}

function getTipColor(priority: TrainingTip['priority']): string {
  const colors = {
    high: 'red',
    medium: 'yellow',
    low: 'blue'
  }
  return colors[priority]
}
