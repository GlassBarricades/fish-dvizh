import { Card, Title, Stack, Group, Badge, Text, Button, Collapse } from '@mantine/core'
import { useDisclosure } from '@mantine/hooks'
import { IconChevronDown, IconChevronUp, IconBulb } from '@tabler/icons-react'
import { useSmartNotifications } from '../hooks/useSmartNotifications'
import { useMemo, useCallback, memo } from 'react'

// –ú–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–¥—Å–∫–∞–∑–∫–∏
const TipCard = memo(({ 
  tip, 
  bgColor 
}: { 
  tip: { message: string; action?: () => void }
  bgColor: string
}) => {
  const handleAction = useCallback(() => {
    if (tip.action) {
      tip.action()
    }
  }, [tip.action])
  
  return (
    <Card withBorder p="xs" mb="xs" bg={bgColor}>
      <Group justify="space-between" align="flex-start">
        <Text size="sm" style={{ flex: 1 }}>
          {tip.message}
        </Text>
        {tip.action && (
          <Button size="xs" variant="filled" color="red" onClick={handleAction}>
            –î–µ–π—Å—Ç–≤–∏–µ
          </Button>
        )}
      </Group>
    </Card>
  )
})

TipCard.displayName = 'TipCard'

// –ú–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã –ø–æ–¥—Å–∫–∞–∑–æ–∫
const TipsGroup = memo(({ 
  tips, 
  title, 
  icon, 
  color, 
  bgColor 
}: { 
  tips: Array<{ message: string; action?: () => void }>
  title: string
  icon: string
  color: string
  bgColor: string
}) => {
  if (tips.length === 0) return null
  
  return (
    <div>
      <Text size="sm" fw={600} c={color} mb="xs">
        {icon} {title}:
      </Text>
      {tips.map((tip, index) => (
        <TipCard key={index} tip={tip} bgColor={bgColor} />
      ))}
    </div>
  )
})

TipsGroup.displayName = 'TipsGroup'

// –ú–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
const StatsCard = memo(({ 
  baitEffectiveness, 
  timeEffectiveness, 
  techniqueAnalysis 
}: { 
  baitEffectiveness: any
  timeEffectiveness: any
  techniqueAnalysis: any
}) => {
  const hasStats = useMemo(() => 
    baitEffectiveness || timeEffectiveness || techniqueAnalysis, 
    [baitEffectiveness, timeEffectiveness, techniqueAnalysis]
  )
  
  if (!hasStats) return null
  
  return (
    <Card withBorder p="xs" bg="gray.0">
      <Title order={6} mb="xs">üìä –ê–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</Title>
      <Stack gap="xs">
        {baitEffectiveness && (
          <Group gap="xs">
            <Text size="xs" c="dimmed">–õ—É—á—à–∞—è –ø—Ä–∏–º–∞–Ω–∫–∞:</Text>
            <Badge color="green" variant="light" size="sm">
              {baitEffectiveness[0]?.baitName} ({baitEffectiveness[0]?.count} –ø–æ–∏–º–æ–∫)
            </Badge>
          </Group>
        )}
        
        {timeEffectiveness !== null && (
          <Group gap="xs">
            <Text size="xs" c="dimmed">–õ—É—á—à–µ–µ –≤—Ä–µ–º—è:</Text>
            <Badge color="blue" variant="light" size="sm">
              {timeEffectiveness}:00
            </Badge>
          </Group>
        )}
        
        {techniqueAnalysis && (
          <Group gap="xs">
            <Text size="xs" c="dimmed">–ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç–ø—É—â–µ–Ω–Ω–æ–π —Ä—ã–±—ã:</Text>
            <Badge 
              color={techniqueAnalysis.releaseRate > 0.5 ? 'green' : 'orange'} 
              variant="light" 
              size="sm"
            >
              {Math.round(techniqueAnalysis.releaseRate * 100)}%
            </Badge>
          </Group>
        )}
      </Stack>
    </Card>
  )
})

StatsCard.displayName = 'StatsCard'

export const TrainingTips = memo(function TrainingTips() {
  const [opened, { toggle }] = useDisclosure(false)
  const { tips, baitEffectiveness, timeEffectiveness, techniqueAnalysis } = useSmartNotifications()
  
  // –ú–µ–º–æ–∏–∑–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ–¥—Å–∫–∞–∑–æ–∫ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
  const { highPriorityTips, mediumPriorityTips, lowPriorityTips } = useMemo(() => ({
    highPriorityTips: tips.filter(tip => tip.priority === 'high'),
    mediumPriorityTips: tips.filter(tip => tip.priority === 'medium'),
    lowPriorityTips: tips.filter(tip => tip.priority === 'low')
  }), [tips])
  
  // –ú–µ–º–æ–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
  const handleToggle = useCallback(() => {
    toggle()
  }, [toggle])
  
  // –ú–µ–º–æ–∏–∑–∏—Ä—É–µ–º –∏–∫–æ–Ω–∫—É –¥–ª—è –∫–Ω–æ–ø–∫–∏
  const toggleIcon = useMemo(() => 
    opened ? <IconChevronUp size={16} /> : <IconChevronDown size={16} />, 
    [opened]
  )
  
  // –ú–µ–º–æ–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
  const toggleText = useMemo(() => 
    opened ? '–°–∫—Ä—ã—Ç—å' : '–ü–æ–∫–∞–∑–∞—Ç—å', 
    [opened]
  )
  
  if (tips.length === 0) {
    return null
  }

  return (
    <Card withBorder p="md" mb="md">
      <Group justify="space-between" align="center" mb="md">
        <Group gap="xs">
          <IconBulb size={20} color="#FFD700" />
          <Title order={5}>üí° –£–º–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏</Title>
          <Badge color="blue" variant="light">
            {tips.length}
          </Badge>
        </Group>
        <Button
          variant="light"
          size="sm"
          onClick={handleToggle}
          rightSection={toggleIcon}
        >
          {toggleText}
        </Button>
      </Group>

      <Collapse in={opened}>
        <Stack gap="md">
          <TipsGroup 
            tips={highPriorityTips}
            title="–í–∞–∂–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"
            icon="üî¥"
            color="red"
            bgColor="red.0"
          />
          
          <TipsGroup 
            tips={mediumPriorityTips}
            title="–ü–æ–ª–µ–∑–Ω—ã–µ —Å–æ–≤–µ—Ç—ã"
            icon="üü°"
            color="orange"
            bgColor="orange.0"
          />
          
          <TipsGroup 
            tips={lowPriorityTips}
            title="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
            icon="üîµ"
            color="blue"
            bgColor="blue.0"
          />
          
          <StatsCard 
            baitEffectiveness={baitEffectiveness}
            timeEffectiveness={timeEffectiveness}
            techniqueAnalysis={techniqueAnalysis}
          />
        </Stack>
      </Collapse>
    </Card>
  )
})
