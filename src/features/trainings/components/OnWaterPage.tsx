import { useState, useMemo, useEffect } from 'react'
import { Stack, Group, Card, Title, Text, Button, Select, NumberInput, Switch, Textarea, Badge, Modal, ActionIcon } from '@mantine/core'
import { IconSettings } from '@tabler/icons-react'
import { MapContainer, Marker, TileLayer } from 'react-leaflet'
import { MapClickHandler } from './MapClickHandler'
import L from 'leaflet'
import iconUrl from 'leaflet/dist/images/marker-icon.png'
import iconShadowUrl from 'leaflet/dist/images/marker-shadow.png'
import { useDisclosure } from '@mantine/hooks'
import { notifications } from '@mantine/notifications'
import type { TrainingTakenUserBait } from '../api'
import type { FishKind } from '../../dicts/fish/api'
import styles from './OnWaterPage.module.css'

interface OnWaterPageProps {
  takenBaits: TrainingTakenUserBait[]
  fishKinds: FishKind[]
  onQuickCatch: (data: QuickCatchData & { currentBait: TrainingTakenUserBait }) => Promise<void>
  onQuickEvent: (data: QuickEventData & { currentBait: TrainingTakenUserBait }) => Promise<void>
  training?: any
  onUpdateCurrentRig: (rig: { bait: TrainingTakenUserBait | null; weight: number }) => void
}

interface QuickCatchData {
  fish_kind_id?: string
  weight_g?: number
  length_cm?: number
  point?: { lat: number; lng: number } | null
  notes?: string
  released: boolean
}

interface QuickEventData {
  kind: 'strike' | 'lost' | 'snag'
  point?: { lat: number; lng: number } | null
  notes?: string
}

interface CurrentRig {
  bait: TrainingTakenUserBait | null
  weight: number
  notes: string
}

export function OnWaterPage({
  takenBaits,
  fishKinds,
  onQuickCatch,
  onQuickEvent,
  training,
  onUpdateCurrentRig
}: OnWaterPageProps) {
  const [currentRig, setCurrentRig] = useState<CurrentRig>(() => {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –æ—Å–Ω–∞—Å—Ç–∫—É –∏–∑ localStorage (—Ç–æ–ª—å–∫–æ –≤–µ—Å –∏ –∑–∞–º–µ—Ç–∫–∏)
    try {
      const saved = localStorage.getItem('current-rig')
      if (saved) {
        const parsed = JSON.parse(saved)
        return {
          bait: null, // –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ takenBaits
          weight: parsed.weight || 0,
          notes: parsed.notes || ''
        }
      }
    } catch {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
    }
    return { bait: null, weight: 0, notes: '' }
  })
  
  // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–º–∞–Ω–∫—É –∏–∑ localStorage –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ takenBaits
  useEffect(() => {
    if (takenBaits && takenBaits.length > 0 && !currentRig.bait) {
      try {
        const saved = localStorage.getItem('current-rig')
        if (saved) {
          const parsed = JSON.parse(saved)
          if (parsed.baitId) {
            const savedBait = takenBaits.find(tb => tb.user_bait_id === parsed.baitId)
            if (savedBait) {
              setCurrentRig(prev => ({ 
                ...prev, 
                bait: savedBait 
              }))
              // –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –æ—Å–Ω–∞—Å—Ç–∫–∏
              onUpdateCurrentRig({ bait: savedBait, weight: currentRig.weight })
            }
          }
        }
      } catch {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
      }
    }
  }, [takenBaits, currentRig.bait, currentRig.weight, onUpdateCurrentRig])

  const [quickCatchModalOpened, quickCatchHandlers] = useDisclosure(false)
  const [quickEventModalOpened, quickEventHandlers] = useDisclosure(false)
  const [eventKind, setEventKind] = useState<'strike' | 'lost' | 'snag' | null>(null)
  const [rigSettingsOpened, rigSettingsHandlers] = useDisclosure(false)
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
  const [fishKindId, setFishKindId] = useState<string | undefined>(undefined)
  const [weightG, setWeightG] = useState<number | undefined>(undefined)
  const [lengthCm, setLengthCm] = useState<number | undefined>(undefined)
  const [released, setReleased] = useState<boolean>(false)
  const [notes, setNotes] = useState<string>('')
  const [point, setPoint] = useState<L.LatLng | null>(null)
  
  const mapCenter = useMemo(() => {
    if (training?.lat && training?.lng) {
      return [training.lat, training.lng] as [number, number]
    }
    return [53.9, 27.5667] as [number, number]
  }, [training])

  const baitOptions = takenBaits.map(tb => ({
    value: tb.user_bait_id,
    label: `${tb.brand ?? ''} ${tb.name ?? ''}${tb.color ? ' ' + tb.color : ''}${tb.size ? ' ' + tb.size : ''}`.trim()
  }))

  const handleSetRig = (baitId: string | null, weight: number) => {
    const bait = baitId ? takenBaits.find(tb => tb.user_bait_id === baitId) || null : null
    const newRig = { bait, weight, notes: currentRig.notes }
    setCurrentRig(newRig)
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –æ—Å–Ω–∞—Å—Ç–∫–∏
    onUpdateCurrentRig({ bait, weight })
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
    try {
      localStorage.setItem('current-rig', JSON.stringify({
        baitId: baitId,
        weight,
        notes: currentRig.notes
      }))
    } catch {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ localStorage
    }
  }

  const handleQuickCatch = () => {
    if (!currentRig.bait) {
      notifications.show({ color: 'red', message: '–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–º–∞–Ω–∫—É –¥–ª—è –æ—Å–Ω–∞—Å—Ç–∫–∏' })
      return
    }
    quickCatchHandlers.open()
  }

  const handleQuickEvent = (kind: 'strike' | 'lost' | 'snag') => {
    if (!currentRig.bait) {
      notifications.show({ color: 'red', message: '–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–º–∞–Ω–∫—É –¥–ª—è –æ—Å–Ω–∞—Å—Ç–∫–∏' })
      return
    }
    setEventKind(kind)
    quickEventHandlers.open()
  }

  const handleSubmitCatch = async () => {
    if (!currentRig.bait) return
    
    try {
      await onQuickCatch({
        fish_kind_id: fishKindId,
        weight_g: weightG,
        length_cm: lengthCm,
        point: point ? { lat: point.lat, lng: point.lng } : null,
        notes: notes.trim() || undefined,
        released,
        currentBait: currentRig.bait
      })
      
      // –°–±—Ä–æ—Å —Ñ–æ—Ä–º—ã
      setFishKindId(undefined)
      setWeightG(undefined)
      setLengthCm(undefined)
      setReleased(false)
      setNotes('')
      setPoint(null)
      quickCatchHandlers.close()
    } catch (error) {
      // –û—à–∏–±–∫–∞ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ
    }
  }

  const handleSubmitEvent = async () => {
    if (!currentRig.bait || !eventKind) return
    
    try {
      await onQuickEvent({
        kind: eventKind,
        point: point ? { lat: point.lat, lng: point.lng } : null,
        notes: notes.trim() || undefined,
        currentBait: currentRig.bait
      })
      
      // –°–±—Ä–æ—Å —Ñ–æ—Ä–º—ã
      setEventKind(null)
      setNotes('')
      setPoint(null)
      quickEventHandlers.close()
    } catch (error) {
      // –û—à–∏–±–∫–∞ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ
    }
  }

  const getEventLabel = (kind: string) => {
    switch (kind) {
      case 'strike': return '–ü–æ–∫–ª—ë–≤–∫–∞'
      case 'lost': return '–°—Ö–æ–¥'
      case 'snag': return '–ó–∞—Ü–µ–ø'
      default: return kind
    }
  }



  return (
    <Stack gap="md" className={styles.onWaterContainer}>
      {/* –¢–µ–∫—É—â–∞—è –æ—Å–Ω–∞—Å—Ç–∫–∞ - –∫–æ–º–ø–∞–∫—Ç–Ω–æ */}
      <Card withBorder p="md" className={styles.rigCard}>
        <Group justify="space-between" align="center">
          <Stack gap={4}>
            <Title order={5}>–¢–µ–∫—É—â–∞—è –æ—Å–Ω–∞—Å—Ç–∫–∞</Title>
            {currentRig.bait ? (
              <Group gap="xs">
                <Badge color="blue" variant="filled" size="sm">
                  {currentRig.bait.brand || '–ë–µ–∑ –±—Ä–µ–Ω–¥–∞'}
                </Badge>
                <Badge color="green" variant="filled" size="sm">
                  {currentRig.bait.name || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}
                </Badge>
                {currentRig.bait.color && (
                  <Badge color="orange" variant="filled" size="sm">
                    {currentRig.bait.color}
                  </Badge>
                )}
                {currentRig.bait.size && (
                  <Badge color="purple" variant="filled" size="sm">
                    {currentRig.bait.size}
                  </Badge>
                )}
                {currentRig.weight > 0 && (
                  <Badge color="red" variant="filled" size="sm">
                    –ì—Ä—É–∑: {currentRig.weight}–≥
                  </Badge>
                )}
              </Group>
            ) : (
              <Text size="sm" c="dimmed">–ü—Ä–∏–º–∞–Ω–∫–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞</Text>
            )}
          </Stack>
          <ActionIcon 
            variant="light" 
            size="lg" 
            onClick={rigSettingsHandlers.open}
            color="blue"
          >
            <IconSettings size={20} />
          </ActionIcon>
        </Group>
      </Card>

      {/* –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è - –±–æ–ª—å—à–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞ */}
      <Card withBorder p="md" className={styles.actionCard}>
        <Title order={5} mb="md">–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è</Title>
        <Stack gap="md">
          {/* –û—Å–Ω–æ–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –ø–æ–∏–º–∫–∏ */}
          <Button
            color="green"
            size="xl"
            onClick={handleQuickCatch}
            disabled={!currentRig.bait}
            className={styles.mainCatchButton}
          >
            üé£ –ü–û–ò–ú–ö–ê
          </Button>
          
          {/* –ö–Ω–æ–ø–∫–∏ —Å–æ–±—ã—Ç–∏–π */}
          <Group grow>
            <Button
              color="blue"
              variant="filled"
              size="lg"
              onClick={() => handleQuickEvent('strike')}
              disabled={!currentRig.bait}
              className={styles.eventButton}
            >
              ‚ö° –ü–æ–∫–ª—ë–≤–∫–∞
            </Button>
            <Button
              color="red"
              variant="filled"
              size="lg"
              onClick={() => handleQuickEvent('lost')}
              disabled={!currentRig.bait}
              className={styles.eventButton}
            >
              üí® –°—Ö–æ–¥
            </Button>
          </Group>
          
          <Button
            color="orange"
            variant="filled"
            size="lg"
            onClick={() => handleQuickEvent('snag')}
            disabled={!currentRig.bait}
            className={styles.eventButton}
          >
            üåø –ó–∞—Ü–µ–ø
          </Button>
        </Stack>
      </Card>

      {/* –ë—ã—Å—Ç—Ä–∞—è —Å–º–µ–Ω–∞ –æ—Å–Ω–∞—Å—Ç–∫–∏ */}
      <Card withBorder p="md" className={styles.actionCard}>
        <Title order={5} mb="md">–ë—ã—Å—Ç—Ä–∞—è —Å–º–µ–Ω–∞</Title>
        <Group grow>
          <Button
            variant="outline"
            size="lg"
            onClick={() => {
              if (!currentRig.bait) return
              const currentIndex = takenBaits.findIndex(tb => tb.user_bait_id === currentRig.bait?.user_bait_id)
              const nextIndex = (currentIndex + 1) % takenBaits.length
              const nextBait = takenBaits[nextIndex]
              handleSetRig(nextBait.user_bait_id, currentRig.weight)
              notifications.show({ 
                color: 'blue', 
                message: `–ü–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞: ${nextBait.brand || ''} ${nextBait.name || ''}`.trim() 
              })
            }}
            disabled={!currentRig.bait || takenBaits.length <= 1}
            className={styles.switchButton}
          >
            üîÑ –°–ª–µ–¥—É—é—â–∞—è
          </Button>
          <Button
            variant="outline"
            size="lg"
            onClick={() => {
              if (!currentRig.bait) return
              const currentIndex = takenBaits.findIndex(tb => tb.user_bait_id === currentRig.bait?.user_bait_id)
              const prevIndex = currentIndex === 0 ? takenBaits.length - 1 : currentIndex - 1
              const prevBait = takenBaits[prevIndex]
              handleSetRig(prevBait.user_bait_id, currentRig.weight)
              notifications.show({ 
                color: 'blue', 
                message: `–ü–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞: ${prevBait.brand || ''} ${prevBait.name || ''}`.trim() 
              })
            }}
            disabled={!currentRig.bait || takenBaits.length <= 1}
            className={styles.switchButton}
          >
            ‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è
          </Button>
        </Group>
      </Card>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ—Å–Ω–∞—Å—Ç–∫–∏ */}
      <Modal
        opened={rigSettingsOpened}
        onClose={rigSettingsHandlers.close}
        title="–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–Ω–∞—Å—Ç–∫–∏"
        size="lg"
      >
        <Stack gap="md">
          <Group grow>
            <Select
              label="–ü—Ä–∏–º–∞–Ω–∫–∞"
              placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–º–∞–Ω–∫—É"
              data={baitOptions}
              value={currentRig.bait?.user_bait_id || null}
              onChange={(value) => handleSetRig(value, currentRig.weight)}
              searchable
              clearable
            />
            <NumberInput
              label="–í–µ—Å –≥—Ä—É–∑–∞ (–≥)"
              placeholder="0"
              value={currentRig.weight}
                             onChange={(value) => handleSetRig(currentRig.bait?.user_bait_id || null, typeof value === 'number' ? value : 0)}
              min={0}
            />
          </Group>
          
          <Textarea 
            label="–ó–∞–º–µ—Ç–∫–∏ –ø–æ –æ—Å–Ω–∞—Å—Ç–∫–µ" 
            value={currentRig.notes} 
            onChange={(e) => {
              const newNotes = e.currentTarget.value
              setCurrentRig(prev => ({ ...prev, notes: newNotes }))
              onUpdateCurrentRig({ bait: currentRig.bait, weight: currentRig.weight })
              try {
                localStorage.setItem('current-rig', JSON.stringify({
                  baitId: currentRig.bait?.user_bait_id || null,
                  weight: currentRig.weight,
                  notes: newNotes
                }))
              } catch {}
            }}
            minRows={2} 
            placeholder="–ó–∞–º–µ—Ç–∫–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –æ—Å–Ω–∞—Å—Ç–∫–∏, —Ç–µ—Ö–Ω–∏–∫–∏ –ª–æ–≤–ª–∏ –∏ —Ç.–¥."
          />
          
          <Group justify="space-between">
            <Button variant="outline" onClick={rigSettingsHandlers.close}>
              –ó–∞–∫—Ä—ã—Ç—å
            </Button>
          </Group>
        </Stack>
      </Modal>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –±—ã—Å—Ç—Ä–æ–π –ø–æ–∏–º–∫–∏ */}
      <Modal
        opened={quickCatchModalOpened}
        onClose={quickCatchHandlers.close}
        title="–ë—ã—Å—Ç—Ä–∞—è –ø–æ–∏–º–∫–∞"
        size="lg"
      >
        <Stack gap="md">
          <Group grow>
            <Select
              label="–í–∏–¥ —Ä—ã–±—ã"
              placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ —Ä—ã–±—ã"
              data={fishKinds.map((f) => ({ value: f.id, label: f.name }))}
              value={fishKindId}
              onChange={(v) => setFishKindId(v || undefined)}
              searchable
              clearable
            />
            <NumberInput
              label="–í–µ—Å (–≥—Ä–∞–º–º—ã)"
              placeholder="0"
              value={weightG}
                             onChange={(v) => setWeightG(typeof v === 'number' ? v : undefined)}
              min={0}
            />
          </Group>
          
          <Group grow>
            <NumberInput
              label="–î–ª–∏–Ω–∞ (—Å–º)"
              placeholder="0"
              value={lengthCm}
                             onChange={(v) => setLengthCm(typeof v === 'number' ? v : undefined)}
              min={0}
            />
            <Switch
              label="–†—ã–±–∞ –æ—Ç–ø—É—â–µ–Ω–∞"
              checked={released}
              onChange={(e) => setReleased(e.currentTarget.checked)}
            />
          </Group>
          
          <Textarea 
            label="–ó–∞–º–µ—Ç–∫–∞" 
            value={notes} 
            onChange={(e) => setNotes(e.currentTarget.value)} 
            minRows={2} 
            placeholder="–û–ø–∏—à–∏—Ç–µ –¥–µ—Ç–∞–ª–∏ –ø–æ–∏–º–∫–∏"
          />
          
          <Stack>
            <div style={{ fontSize: '14px', color: 'gray' }}>
              –ö–ª–∏–∫ ‚Äî –ø–æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ—á–∫—É –ø–æ–∏–º–∫–∏. –î–≤–æ–π–Ω–æ–π –∫–ª–∏–∫ ‚Äî –æ—á–∏—Å—Ç–∏—Ç—å.
            </div>
            <div style={{ height: 260 }}>
              <MapContainer center={mapCenter} zoom={12} style={{ height: '100%', width: '100%' }}>
                <TileLayer url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png" />
                <MapClickHandler setPoint={setPoint} />
                {point && (
                  <Marker 
                    position={point} 
                    icon={new L.Icon({ 
                      iconUrl, 
                      shadowUrl: iconShadowUrl, 
                      iconSize: [25,41], 
                      iconAnchor:[12,41] 
                    })} 
                  />
                )}
              </MapContainer>
            </div>
          </Stack>
          
          <Group justify="space-between">
            <Button variant="outline" onClick={quickCatchHandlers.close}>
              –û—Ç–º–µ–Ω–∞
            </Button>
            <Button onClick={handleSubmitCatch}>
              –î–æ–±–∞–≤–∏—Ç—å –ø–æ–∏–º–∫—É
            </Button>
          </Group>
        </Stack>
      </Modal>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –±—ã—Å—Ç—Ä–æ–≥–æ —Å–æ–±—ã—Ç–∏—è */}
      <Modal
        opened={quickEventModalOpened}
        onClose={quickEventHandlers.close}
        title={`–ë—ã—Å—Ç—Ä–æ–µ —Å–æ–±—ã—Ç–∏–µ: ${eventKind ? getEventLabel(eventKind) : ''}`}
        size="md"
      >
        <Stack gap="md">
          <Textarea 
            label="–ó–∞–º–µ—Ç–∫–∞" 
            value={notes} 
            onChange={(e) => setNotes(e.currentTarget.value)} 
            minRows={2} 
            placeholder="–û–ø–∏—à–∏—Ç–µ —Å–æ–±—ã—Ç–∏–µ"
          />
          
          <Stack>
            <div style={{ fontSize: '14px', color: 'gray' }}>
              –ö–ª–∏–∫ ‚Äî –ø–æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ—á–∫—É —Å–æ–±—ã—Ç–∏—è. –î–≤–æ–π–Ω–æ–π –∫–ª–∏–∫ ‚Äî –æ—á–∏—Å—Ç–∏—Ç—å.
            </div>
            <div style={{ height: 260 }}>
              <MapContainer center={mapCenter} zoom={12} style={{ height: '100%', width: '100%' }}>
                <TileLayer url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png" />
                <MapClickHandler setPoint={setPoint} />
                {point && (
                  <Marker 
                    position={point} 
                    icon={new L.Icon({ 
                      iconUrl, 
                      shadowUrl: iconShadowUrl, 
                      iconSize: [25,41], 
                      iconAnchor:[12,41] 
                    })} 
                  />
                )}
              </MapContainer>
            </div>
          </Stack>
          
          <Group justify="space-between">
            <Button variant="outline" onClick={quickEventHandlers.close}>
              –û—Ç–º–µ–Ω–∞
            </Button>
            <Button onClick={handleSubmitEvent}>
              –î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ
            </Button>
          </Group>
        </Stack>
      </Modal>
    </Stack>
  )
}
